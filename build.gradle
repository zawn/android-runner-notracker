import org.apache.commons.io.IOUtils

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.7

buildscript {
    repositories {
        maven {
            url uri('http://192.168.108.60/nexus/content/groups/public/')
        }
        jcenter()
    }
    dependencies {
        classpath 'commons-io:commons-io:1.4'
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4"
    }
}

repositories {
    maven {
        url 'http://192.168.108.60/nexus/content/groups/public/'
    }
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.android.tools.build:gradle:1.3.1'
    compile 'org.apache.commons:commons-csv:1.1'
    compile 'com.belerweb:pinyin4j:2.5.0'
    compile 'org.apache.tika:tika-core:1.10'
    compile("org.apache.tika:tika-parsers:1.10") {
        // 仅使用该包中的文件编码识别功能,无需导入其他依赖.
        exclude module: '*'
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "http://192.168.108.60/nexus/content/repositories/releases/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "http://192.168.108.60/nexus/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('repo'))

//           repository(url: getReleaseRepositoryUrl()) {
//                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//            }
//            snapshotRepository(url: getSnapshotRepositoryUrl()) {
//                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//            }

        }
    }
}

/**
 * Start:Modifying auto-generated content
 */
def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured { pom ->
    pom.withXml { XmlProvider xmlProvider ->
        def xml = xmlProvider.asString()
        xml.setLength(0)
        project.projectDir
        xml.append(IOUtils.toString(new FileInputStream("$projectDir/pom.xml")))
    }
}
// End:Modifying auto-generated content

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options {
        failOnError false
        encoding "utf-8"
        charSet "utf-8"
        links "http://docs.oracle.com/javase/7/docs/api/"
    }
    // fix java 8 very strict.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


compileJava {
    options.encoding = "UTF-8"
}

//compileGroovy { groovyOptions.encoding = "UTF-8" }

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

group 'com.house365.build'
version '1.0.3'

task writeNewPom << {
    pom {
        project {
            groupId 'com.house365.build'
            artifactId 'android-csv-variants'
            version '1.0.3'

            inceptionYear '2015'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$projectDir/pom.xml")
}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}


apply plugin: 'com.jfrog.bintray'

bintray {
    user = project.hasProperty('bintray_username') ? project.property('bintray_username') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : System.getenv('BINTRAY_API_KEY')

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = 'android-csv-variants'
        desc = 'Bintray aar publishing example'
        licenses = ['Apache-2.0']
        labels = ['csv', 'android']
        publicDownloadNumbers = true
    }
}